{"version":3,"sources":["components/TodolistItem/TodolistItem.module.css","redux/todolists.ts","redux/tasks.ts","redux/store.ts","components/AddItemForm/AddItemForm.tsx","components/AddItemForm/index.ts","components/EditableTitle/EditableTitle.tsx","components/EditableTitle/index.ts","components/Task/Task.tsx","components/Task/index.ts","components/TodolistItem/TodolistItem.tsx","components/TodolistItem/index.ts","components/Todolist/Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","FilterValuesType","initialState","createDate","date","Date","Intl","DateTimeFormat","year","month","day","format","changeTodolistFilterAC","value","id","type","rootReducer","combineReducers","todolists","state","action","filter","all","todolist","map","title","newTitle","tasks","todolistId","taskId","status","active","task","store","createStore","AddItemForm","addItem","useState","setTitle","errorMessage","setErrorMessage","useSelector","tasksTitleList","Array","from","Set","item","isTaskTitleExist","Boolean","length","some","addItemHandler","trim","useEffect","TextField","variant","label","error","onChange","e","currentTarget","onKeyPress","key","className","helperText","size","IconButton","onClick","color","disabled","Add","style","margin","React","memo","EditableTitle","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","dispatch","useDispatch","isDone","completed","Box","width","Checkbox","checked","taskStatus","changeTaskStatusAC","changeTaskTitleAC","removeTaskAC","Delete","TodoList","isTasksCompleted","every","filteredTasks","styles","todolistItem","Typography","changeTodolistTitleAC","uuidv4","addTaskAC","mt","Button","TodolistItem","Todolist","Grid","container","padding","addTodolistAC","spacing","Paper","elevation","App","Container","fixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,aAAe,qC,gEC0DrBC,E,yDAzDNC,EAAoC,GAEpCC,EAAa,WACjB,IAAMC,EAAO,IAAIC,KAQjB,OANkB,IAAIC,KAAKC,eAAe,QAAQ,CAChDC,KAAM,UACNC,MAAO,QACPC,IAAK,YAGUC,OAAOP,IA6BbQ,EAAyB,SAACC,EAAyBC,GAA1B,MAA0C,CAAEC,KAAM,yBAA0BF,QAAOC,Q,SAiB7Gb,O,aAAAA,I,mBAAAA,I,0BAAAA,M,KCxDZ,IAAMC,EAAgC,GCEhCc,EAAcC,YAAgB,CAClCC,UFU8B,WAA0F,IAAzFC,EAAwF,uDAA3DjB,EAAckB,EAA6C,uCAEvH,OAAQA,EAAOL,MACb,IAAK,eACH,MAAM,CAAN,2BAEOK,GAFP,IAGIC,OAAQpB,EAAiBqB,OAH7B,mBAKKH,IAEP,IAAK,kBACH,OAAOA,EAAME,QAAO,SAAAE,GAAQ,OAAIA,EAAST,KAAOM,EAAON,MACzD,IAAK,wBACH,OAAOK,EAAMK,KAAI,SAAAD,GAAQ,OAAIA,EAAST,KAAOM,EAAON,GAAvB,2BAAgCS,GAAhC,IAA0CE,MAAOL,EAAOM,WAAYH,KACnG,IAAK,yBACH,OAAOJ,EAAMK,KAAI,SAAAD,GAAQ,OAAIA,EAAST,KAAOM,EAAON,GAAvB,2BAAgCS,GAAhC,IAA0CF,OAAQD,EAAOP,QAASU,KACjG,QACE,OAAOJ,IE3BXQ,MDF0B,WAAkF,IAAjFR,EAAgF,uDAAvDjB,EAAckB,EAAyC,uCAC3G,OAAQA,EAAOL,MACb,IAAK,WACH,MAAM,GAAN,mBAEOI,GAFP,CAGI,CACES,WAAYR,EAAOQ,WACnBC,OAAQT,EAAOS,OACfJ,MAAOL,EAAOK,MACdK,OAAQ7B,EAAiB8B,UAIjC,IAAK,cACH,OAAOZ,EAAME,QAAO,SAAAW,GAAI,OAAIA,EAAKH,SAAWT,EAAOS,UACrD,IAAK,qBACH,OAAOV,EAAMK,KAAI,SAAAQ,GAAI,OAAIA,EAAKH,SAAWT,EAAOS,OAAvB,2BAAoCG,GAApC,IAA0CF,OAAQV,EAAOU,SAAUE,KAC9F,IAAK,oBACH,OAAOb,EAAMK,KAAI,SAAAQ,GAAI,OAAIA,EAAKH,SAAWT,EAAOS,OAAvB,2BAAoCG,GAApC,IAA0CP,MAAOL,EAAOM,WAAYM,KAC/F,QACE,OAAOb,MCfAc,EAAQC,YAAYlB,G,qFCE3BmB,EAAc,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,QAASR,EAAuC,EAAvCA,WAAuC,EAC3CS,mBAAS,IADkC,mBAC9DZ,EAD8D,KACvDa,EADuD,OAE7BD,mBAAwB,MAFK,mBAE9DE,EAF8D,KAEhDC,EAFgD,KAI/Db,EADWc,aAA+C,SAAAtB,GAAK,OAAIA,EAAMQ,SACxDN,QAAO,SAAAW,GAAI,OAAIA,EAAKJ,aAAeA,KACpDc,EAAiBC,MAAMC,KAAK,IAAIC,IAAIlB,EAAMH,KAAI,SAAAsB,GAAI,OAAIA,EAAKrB,WAC3DsB,EAAmBC,QAAQrB,EAAMsB,QAAUP,EAAeQ,MAAK,SAAAJ,GAAI,OAAIA,IAASrB,MAEhF0B,EAAiB,WACA,KAAjB1B,EAAM2B,QACRhB,EAAQX,EAAM2B,QACdd,EAAS,KAETE,EAAgB,uBAuBpB,OARAa,qBAAU,WAENb,EADEO,EACc,6BAEA,QAEjB,CAACA,IAGF,gCACE,cAACO,EAAA,EAAD,CACEzC,MAAOY,EACPX,GAAG,6BACHyC,QAAQ,WACRC,MAAM,aACNC,MAAOT,QAAQT,GACfmB,SA3BuB,SAACC,GAC5BnB,EAAgB,MAChBF,EAASqB,EAAEC,cAAc/C,QA0BrBgD,WAvBsB,SAACF,GACb,UAAVA,EAAEG,KAAoBf,GACxBI,KAsBEY,UAAWxB,EAAe,QAAU,GACpCyB,WAAYzB,EACZ0B,KAAK,UAEP,cAACC,EAAA,EAAD,CACEC,QAAShB,EACTiB,MAAM,UACNC,SAAUtB,EAHZ,SAKE,cAACuB,EAAA,EAAD,CAAKC,MAAO,CAAEC,OAAQ,gBClEfrC,EDwEAsC,IAAMC,KAAKvC,G,oCElEpBwC,EAAgB,SAACC,GAAmC,IAAD,EACvBvC,oBAAS,GADc,mBAChDwC,EADgD,KACtCC,EADsC,OAE7BzC,mBAAS,IAFoB,mBAEhDZ,EAFgD,KAEzCa,EAFyC,KAuBvD,OAAIuC,EAEA,cAACvB,EAAA,EAAD,CACEzC,MAAOY,EACPiC,SANgB,SAACC,GAAD,OAAsCrB,EAASqB,EAAEC,cAAc/C,QAO/EgD,WAdsB,SAACF,GACb,UAAVA,EAAEG,MACJgB,GAAY,GACZF,EAAMlB,SAASjC,KAYbsD,OApBmB,WACvBD,GAAY,GACZF,EAAMlB,SAASjC,IAmBXuD,WAAS,IAKR,sBAAMC,cA/BY,WACvBH,GAAY,GACZxC,EAASsC,EAAMnD,QA6BV,SAAwCmD,EAAMnD,SCzCxCkD,ED4CAF,IAAMC,KAAKC,G,SE/BpBO,EAAgC,SAAC,GAIhC,IAHLrD,EAGI,EAHJA,OACAJ,EAEI,EAFJA,MACAK,EACI,EADJA,OAEMqD,EAAWC,cAeXC,EAASvD,IAAW7B,EAAiBqF,UAE3C,OACE,eAACC,EAAA,EAAD,CAAKC,MAAM,QAAX,UACE,cAACC,EAAA,EAAD,CACEC,QAASL,EACTjB,MAAM,UACNV,SApBmB,SAACC,GACxB,IAAMgC,EAAahC,EAAEC,cAAc8B,QAAUzF,EAAiBqF,UAAYrF,EAAiB8B,OAC3FoD,ENS8B,SAACtD,EAAgBC,GAAjB,MAAgD,CAACf,KAAM,qBAAsBc,SAAQC,UMT1G8D,CAAmB/D,EAAQ8D,OAoBlC,cAAC,EAAD,CAAelE,MAAOA,EAAOiC,SAjBT,SAAChC,GACvByD,ENM6B,SAACtD,EAAgBH,GAAjB,MAAuC,CAAEX,KAAM,oBAAqBc,SAAQH,YMNhGmE,CAAkBhE,EAAQH,OAiBjC,cAACwC,EAAA,EAAD,CAAYC,QAdG,WACjBgB,ENDwB,SAACtD,GAAD,MAAqB,CAAEd,KAAM,cAAec,UMC3DiE,CAAajE,KAapB,SACE,cAACkE,EAAA,EAAD,UC5COb,EDkDAT,IAAMC,KAAKQ,G,iBEhCpBc,EAAwC,SAAC,GAKxC,IAJLpE,EAII,EAJJA,WACAH,EAGI,EAHJA,MACAJ,EAEI,EAFJA,OACAjB,EACI,EADJA,KAEM+E,EAAWC,cAEXzD,EADWc,aAA+C,SAAAtB,GAAK,OAAIA,EAAMQ,SACxDN,QAAO,SAAAW,GAAI,OAAIA,EAAKJ,aAAeA,KACpDqE,EAAmBtE,EAAMuE,OAAM,SAAAlE,GAAI,OAAIA,EAAKF,SAAW7B,EAAiBqF,cAAc3D,EAAMsB,OAAS,EAkBrGkD,EAAgBxE,EAAMN,QAAO,SAAAW,GACjC,OAAOX,IAAWpB,EAAiBqB,KAAaU,EAAKF,SAAWT,KAGlE,OACE,eAACkE,EAAA,EAAD,CAAKxB,UAAWqC,IAAOC,aAAvB,UACE,eAACC,EAAA,EAAD,CAAYlC,MAAM,UAAlB,sBAAsChE,KAEpC6F,GACE,cAACK,EAAA,EAAD,CAAYlC,MAAM,YAAlB,iCAIJ,eAACmB,EAAA,EAAD,WACE,cAAC,EAAD,CAAe9D,MAAOA,EAAOiC,SA1BP,SAAChC,GAC3ByD,ETKiC,SAACrE,EAAYY,GAAb,MAAmC,CAAEX,KAAM,wBAAyBD,KAAIY,YSLhG6E,CAAsB3E,EAAYF,OA0BvC,cAACwC,EAAA,EAAD,CAAYC,QA/BK,WACrBgB,ETQ6C,CAAEpE,KAAM,kBAAmBD,GSR9Cc,KA8BtB,SACE,cAACmE,EAAA,EAAD,SAGJ,cAAC,EAAD,CAAa3D,QAvBD,SAACX,GACf0D,ERZqB,SAACvD,EAAoBH,GAArB,MAAwC,CAAEV,KAAM,WAAYa,aAAYC,OAAQ2E,cAAU/E,SQYtGgF,CAAU7E,EAAYH,KAsBEG,WAAYA,IAC3C,8BAEIuE,EAAc3E,KAAI,SAAAQ,GAAI,OAAI,cAAC,EAAD,eAA4BA,GAAjBA,EAAKH,aAG9C,eAAC0D,EAAA,EAAD,CAAKmB,GAAG,OAAR,UACE,cAACC,EAAA,EAAD,CACEpD,QAASlC,IAAWpB,EAAiBqB,IAAM,YAAc,OACzD6C,QApCkB,kBAAMgB,EAASvE,EAAuBX,EAAiBqB,IAAKM,KAqC9EwC,MAAM,UACNH,KAAK,QAJP,iBAQA,cAAC0C,EAAA,EAAD,CACEpD,QAASlC,IAAWpB,EAAiB8B,OAAS,YAAc,OAC5DoC,QA3CqB,kBAAMgB,EAASvE,EAAuBX,EAAiB8B,OAAQH,KA4CpFwC,MAAM,UACNH,KAAK,QAJP,oBAQA,cAAC0C,EAAA,EAAD,CACEpD,QAASlC,IAAWpB,EAAiBqF,UAAY,YAAc,OAC/DnB,QAlDwB,kBAAMgB,EAASvE,EAAuBX,EAAiBqF,UAAW1D,KAmD1FwC,MAAM,YACNH,KAAK,QAJP,8BCvFO2C,EDoGAnC,IAAMC,KAAKsB,GE7FpBa,EAAqB,WACzB,IAAM3F,EAAYuB,aAAmD,SAAAtB,GAAK,OAAIA,EAAMD,aAC9EiE,EAAWC,cAMjB,OACE,qCACE,cAAC0B,EAAA,EAAD,CAAMC,WAAS,EAACxC,MAAO,CAAEyC,QAAS,UAAlC,SACE,cAAC,EAAD,CAAa5E,QAPC,SAACX,GACnB0D,EXyByB,SAAC1D,GAAD,MAAoB,CAAEV,KAAM,eAAgBD,GAAI0F,cAAU/E,QAAOrB,KAAMD,KWzBvF8G,CAAcxF,SAQrB,cAACqF,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,EAAzB,SAEIhG,EAAUM,KAAI,SAAAD,GACZ,OACE,cAACuF,EAAA,EAAD,CAAMhE,MAAI,EAAV,SACE,cAACqE,EAAA,EAAD,CAAOC,UAAW,EAAG7C,MAAO,CAAEyC,QAAS,QAAvC,SACE,cAAC,EAAD,CACEpF,WAAYL,EAAST,GACrBW,MAAOF,EAASE,MAChBJ,OAAQE,EAASF,OACjBjB,KAAMmB,EAASnB,UANLmB,EAAST,aAkBxB2D,MAAMC,KAAKmC,GC/BXQ,EAVO,WACpB,OACE,mCACE,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,cAAC,EAAD,SCOOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAD,CAAUjG,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFkG,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.f88a0f0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistItem\":\"TodolistItem_todolistItem__4h7ZG\"};","import { v4 as uuidv4 } from 'uuid';\r\n\r\nconst initialState: Array<TodolistType> = [];\r\n\r\nconst createDate = () => {\r\n  const date = new Date();\r\n\r\n  const formatter = new Intl.DateTimeFormat(\"en-US\",{\r\n    year: \"numeric\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n  });\r\n\r\n  return formatter.format(date);\r\n};\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n  \r\n  switch (action.type) {\r\n    case 'ADD-TODOLIST':\r\n      return [\r\n        {\r\n          ...action,\r\n          filter: FilterValuesType.all, \r\n        }, \r\n        ...state\r\n      ];\r\n    case 'REMOVE-TODOLIST':\r\n      return state.filter(todolist => todolist.id !== action.id);\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return state.map(todolist => todolist.id === action.id ? {...todolist, title: action.newTitle} : todolist);\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return state.map(todolist => todolist.id === action.id ? {...todolist, filter: action.value} : todolist);\r\n    default:\r\n      return state;\r\n  };\r\n};\r\n\r\n//actions\r\nexport const addTodolistAC = (title: string) => ({ type: 'ADD-TODOLIST', id: uuidv4(), title, date: createDate() } as const);\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id } as const);\r\nexport const changeTodolistTitleAC = (id: string, newTitle: string) => ({ type: 'CHANGE-TODOLIST-TITLE', id, newTitle } as const);\r\nexport const changeTodolistFilterAC = (value: FilterValuesType, id: string) => ({ type: 'CHANGE-TODOLIST-FILTER', value, id } as const);\r\n\r\n//types\r\ntype ActionsType =\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>;\r\n\r\nexport type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  filter: FilterValuesType;\r\n  date: string;\r\n};\r\n\r\nexport enum FilterValuesType {\r\n  all, active, completed\r\n};","import { v4 as uuidv4 } from 'uuid';\r\nimport { FilterValuesType } from './todolists';\r\n\r\nconst initialState: Array<TaskType> = [];\r\n\r\nexport const tasksReducer = (state: Array<TaskType> = initialState, action: ActionsType): Array<TaskType> => {\r\n  switch (action.type) {\r\n    case 'ADD-TASK':\r\n      return (\r\n        [\r\n          ...state,\r\n          {\r\n            todolistId: action.todolistId,\r\n            taskId: action.taskId,\r\n            title: action.title,\r\n            status: FilterValuesType.active,\r\n          }\r\n        ]\r\n      );\r\n    case 'REMOVE-TASK':\r\n      return state.filter(task => task.taskId !== action.taskId);\r\n    case 'CHANGE-TASK-STATUS':\r\n      return state.map(task => task.taskId === action.taskId ? {...task, status: action.status} : task);\r\n    case 'CHANGE-TASK-TITLE':\r\n      return state.map(task => task.taskId === action.taskId ? {...task, title: action.newTitle} : task);\r\n    default:\r\n      return state;\r\n  };\r\n};\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string) => ({ type: 'REMOVE-TASK', taskId } as const);\r\nexport const addTaskAC = (todolistId: string, title: string) => ({ type: 'ADD-TASK', todolistId, taskId: uuidv4(), title } as const);\r\nexport const changeTaskStatusAC = (taskId: string, status: FilterValuesType ) => ({type: 'CHANGE-TASK-STATUS', taskId, status} as const);\r\nexport const changeTaskTitleAC = (taskId: string, newTitle: string) => ({ type: 'CHANGE-TASK-TITLE', taskId, newTitle } as const);\r\n\r\n// types\r\nexport type ActionsType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof changeTaskStatusAC>\r\n  | ReturnType<typeof changeTaskTitleAC>;\r\n\r\nexport type TaskType = {\r\n  todolistId: string;\r\n  taskId: string;\r\n  title: string;\r\n  status: FilterValuesType;\r\n};\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\n\r\nexport type TaskStatusType = boolean;","import { combineReducers, createStore } from 'redux';\r\nimport { tasksReducer } from './tasks';\r\nimport { todolistsReducer } from './todolists';\r\n\r\n// creating the structure of the state object\r\nconst rootReducer = combineReducers({\r\n  todolists: todolistsReducer,\r\n  tasks: tasksReducer,\r\n});\r\n\r\n// create store\r\nexport const store = createStore(rootReducer);\r\n\r\n// define the type of the entire state object\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;","import { IconButton, TextField } from '@material-ui/core';\r\nimport { Add } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useState, KeyboardEvent, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { AppRootStateType } from '../../redux/store';\r\nimport { TaskType } from '../../redux/tasks';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void;\r\n  todolistId?: string;\r\n};\r\n\r\nconst AddItemForm = ({ addItem, todolistId }: AddItemFormPropsType) => {\r\n  const [title, setTitle] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n  const allTasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks);\r\n  const tasks = allTasks.filter(task => task.todolistId === todolistId);\r\n  const tasksTitleList = Array.from(new Set(tasks.map(item => item.title)));\r\n  const isTaskTitleExist = Boolean(tasks.length && tasksTitleList.some(item => item === title));\r\n  \r\n  const addItemHandler = () => {\r\n    if (title.trim() !== '') {\r\n      addItem(title.trim());\r\n      setTitle('');\r\n    } else {\r\n      setErrorMessage('Title is required!');\r\n    };\r\n  };\r\n\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setErrorMessage(null);\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n \r\n  const onPressEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && !isTaskTitleExist) {\r\n      addItemHandler();\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isTaskTitleExist) {\r\n      setErrorMessage('Such title already exists!');\r\n    } else {\r\n      setErrorMessage(null);\r\n    }\r\n  }, [isTaskTitleExist]);\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        value={title}\r\n        id=\"outlined-error-helper-text\" \r\n        variant=\"outlined\"\r\n        label=\"Type title\"\r\n        error={Boolean(errorMessage)}\r\n        onChange={onChangeTitleHandler}\r\n        onKeyPress={onPressEnterHandler}\r\n        className={errorMessage ? \"error\" : \"\"}\r\n        helperText={errorMessage}\r\n        size=\"small\"\r\n      />\r\n      <IconButton\r\n        onClick={addItemHandler}\r\n        color=\"primary\"\r\n        disabled={isTaskTitleExist}\r\n      >\r\n        <Add style={{ margin: \"-4px\" }} />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(AddItemForm);","import AddItemForm from './AddItemForm';\r\n\r\nexport default AddItemForm;","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, EventHandler, KeyboardEventHandler, useState } from 'react';\r\n\r\nexport type EditableTitlePropsType = {\r\n  title: string;\r\n  onChange: (newValue: string) => void;\r\n};\r\n\r\nconst EditableTitle = (props: EditableTitlePropsType) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n  \r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    setTitle(props.title);\r\n  };\r\n\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n\r\n  const onPressEnterHandler = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      setEditMode(false);\r\n      props.onChange(title);\r\n    };\r\n  };\r\n\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n\r\n  if (editMode) {\r\n    return (\r\n      <TextField\r\n        value={title}\r\n        onChange={onChangeTitle}\r\n        onKeyPress={onPressEnterHandler}\r\n        onBlur={activateViewMode}\r\n        autoFocus\r\n      />\r\n    )\r\n  };\r\n\r\n  return <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n};\r\n\r\nexport default React.memo(EditableTitle);","import EditableTitle from './EditableTitle';\r\n\r\nexport default EditableTitle;","import { Delete } from '@material-ui/icons';\r\nimport { Box, Checkbox, IconButton } from '@material-ui/core';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from '../../redux/tasks';\r\nimport EditableTitle from '../EditableTitle';\r\nimport { FilterValuesType } from '../../redux/todolists';\r\n\r\ntype TaskPropsType = {\r\n  taskId: string;\r\n  title: string;\r\n  status: FilterValuesType;\r\n};\r\n\r\nconst Task: React.FC<TaskPropsType> = ({\r\n  taskId,\r\n  title,\r\n  status,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const taskStatus = e.currentTarget.checked ? FilterValuesType.completed : FilterValuesType.active;\r\n    dispatch(changeTaskStatusAC(taskId, taskStatus));\r\n  };\r\n\r\n  const changeTaskTitle = (newTitle: string) => {\r\n    dispatch(changeTaskTitleAC(taskId, newTitle));\r\n  };\r\n\r\n  const removeTask = () => {\r\n    dispatch(removeTaskAC(taskId));\r\n  };\r\n\r\n  const isDone = status === FilterValuesType.completed;\r\n\r\n  return (\r\n    <Box width=\"260px\">\r\n      <Checkbox\r\n        checked={isDone}\r\n        color=\"primary\"\r\n        onChange={changeTaskStatus}\r\n      />\r\n      <EditableTitle title={title} onChange={changeTaskTitle} />\r\n      <IconButton onClick={removeTask}>\r\n        <Delete />\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(Task);","import Task from './Task';\r\n\r\nexport default Task;","import { Box, Button, IconButton, Typography } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport React from 'react';\r\n\r\nimport { AppRootStateType } from '../../redux/store';\r\nimport AddItemForm from '../AddItemForm';\r\nimport { changeTodolistFilterAC, changeTodolistTitleAC, FilterValuesType, removeTodolistAC } from '../../redux/todolists';\r\nimport { addTaskAC, TaskType } from '../../redux/tasks';\r\nimport EditableTitle from '../EditableTitle';\r\nimport Task from '../Task';\r\nimport styles from './TodolistItem.module.css';\r\n\r\ntype TodolistPropsType = {\r\n  todolistId: string;\r\n  title: string;\r\n  filter: FilterValuesType;\r\n  date: string;\r\n};\r\n\r\nconst TodoList: React.FC<TodolistPropsType> = ({\r\n  todolistId,\r\n  title,\r\n  filter,\r\n  date,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const allTasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks);\r\n  const tasks = allTasks.filter(task => task.todolistId === todolistId);\r\n  const isTasksCompleted = tasks.every(task => task.status === FilterValuesType.completed) && tasks.length > 0;\r\n\r\n  const removeTodoList = () => {\r\n    dispatch(removeTodolistAC(todolistId));\r\n  };\r\n\r\n  const changeTodoListTitle = (newTitle: string) => {\r\n    dispatch(changeTodolistTitleAC(todolistId, newTitle));\r\n  };\r\n\r\n  const onAllClickHandler = () => dispatch(changeTodolistFilterAC(FilterValuesType.all, todolistId));\r\n  const onActiveClickHandler = () => dispatch(changeTodolistFilterAC(FilterValuesType.active, todolistId));\r\n  const onCompletedClickHandler = () => dispatch(changeTodolistFilterAC(FilterValuesType.completed, todolistId));\r\n\r\n  const addTask = (title: string) => {\r\n    dispatch(addTaskAC(todolistId, title));\r\n  };\r\n\r\n  const filteredTasks = tasks.filter(task => {\r\n    return filter === FilterValuesType.all ? true : task.status === filter;\r\n  });\r\n  \r\n  return (\r\n    <Box className={styles.todolistItem}>\r\n      <Typography color=\"primary\">Created: {date}</Typography>\r\n      {\r\n        isTasksCompleted &&\r\n          <Typography color=\"secondary\" >\r\n            All tasks completed\r\n          </Typography>\r\n      }\r\n      <Box>\r\n        <EditableTitle title={title} onChange={changeTodoListTitle}/>\r\n        <IconButton onClick={removeTodoList}>\r\n          <Delete />\r\n        </IconButton>\r\n      </Box>\r\n      <AddItemForm addItem={addTask} todolistId={todolistId}/>\r\n      <div>\r\n        {\r\n          filteredTasks.map(task => <Task key={task.taskId} {...task} />)\r\n        }\r\n      </div>\r\n      <Box mt=\"15px\">\r\n        <Button\r\n          variant={filter === FilterValuesType.all ? 'contained' : 'text'}\r\n          onClick={onAllClickHandler}\r\n          color=\"primary\"\r\n          size=\"small\"\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          variant={filter === FilterValuesType.active ? 'contained' : 'text'}\r\n          onClick={onActiveClickHandler}\r\n          color=\"primary\"\r\n          size=\"small\"\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          variant={filter === FilterValuesType.completed ? 'contained' : 'text'}\r\n          onClick={onCompletedClickHandler}\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n        >\r\n          Completed\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoList);","import TodolistItem from './TodolistItem';\r\n\r\nexport default TodolistItem;","import { Grid, Paper } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport React from 'react';\r\n\r\nimport { AppRootStateType } from '../../redux/store';\r\nimport { addTodolistAC, TodolistType } from '../../redux/todolists';\r\nimport AddItemForm from '../AddItemForm';\r\nimport TodolistItem from '../TodolistItem';\r\n\r\nconst Todolist: React.FC = () => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists);\r\n  const dispatch = useDispatch();\r\n  \r\n  const addTodolist = (title: string) => {\r\n    dispatch(addTodolistAC(title));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"30px 0\" }}>\r\n        <AddItemForm addItem={addTodolist} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {\r\n          todolists.map(todolist => {\r\n            return (\r\n              <Grid item key={todolist.id}>\r\n                <Paper elevation={3} style={{ padding: \"15px\" }}>\r\n                  <TodolistItem \r\n                    todolistId={todolist.id}\r\n                    title={todolist.title}\r\n                    filter={todolist.filter}\r\n                    date={todolist.date}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            )\r\n          })\r\n        }\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Todolist);","import { Container } from '@material-ui/core';\r\nimport Todolist from './components/Todolist/Todolist';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Container fixed>\r\n        <Todolist />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './redux/store';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}